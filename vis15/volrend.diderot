#version 1.0
// vvvvvvvvvvvvvvvvvvvvvv BEGIN program copied from Figure 4 of VIS'15 paper (with 3 NOTEd modifications)
input real isoval;  input real thick;
input vec3 camEye;  input vec3 camAt;   input vec3 camUp;
input real camFOV;  input int iresU;    input int iresV;
input real camNear; input real camFar; // NOTE: missing from paper: sloppy code condensing
input real refStep; input real rayStep;
input vec3 lightVsp; // light direction in view-space
input real phongKa; input real phongKd;

field#4(3)[] V = bspln5 ⊛ image("vol.nrrd"); // NOTE: paper had different filename
field#4(3)[] F = V - isoval; // isosurface is {x|F(x)=0}
function real mask(vec3 x) = 1.0;
field#0(1)[3] cmap = tent ⊛ clamp(image("cmap.nrrd")); // NOTE: paper had different filename
function vec3 color(vec3 x) = cmap(V(x));
function real alpha(real v, real g)
  = clamp(0, 1, 1.3*(1 - |v|/(g*thick)));

real camDist = |camAt - camEye|;
vec3 camN = normalize(camAt - camEye); // away
vec3 camU = normalize(camN × camUp);    // right
vec3 camV = camU × camN;                // up
real camVmax = tan(camFOV*π/360)*camDist;
real camUmax = camVmax*iresU/iresV;
vec3 light = transpose([camU,camV,camN])•normalize(lightVsp);

strand raycast (int ui, int vi) {
  real rayU = lerp(-camUmax, camUmax, -0.5, ui, iresU-0.5);
  real rayV = lerp(camVmax, -camVmax, -0.5, vi, iresV-0.5);
  real rayN = camNear;
  vec3 rayVec = camN + (rayU*camU + rayV*camV)/camDist;
  real transp = 1;
  vec3 rgb = [0, 0, 0];
  output vec4 rgba = [0, 0, 0, 0];
  update {
    vec3 x = camEye + rayN*rayVec;
    if (inside(x,V)) {
      real val = F(x);
      vec3 grad = -∇F(x);
      real a = alpha(val, |grad|)*mask(x);
      if (a > 0) {
        a = 1 - pow(1-a, rayStep*|rayVec|/refStep);
        real depth = lerp(1.1, 0.7, camNear, rayN, camFar);
        real shade = max(0, normalize(grad)•light);
        rgb += transp*a*depth*(phongKa + phongKd*shade)*color(x);
        transp *= 1 - a;
      }
    }
    if (transp < 0.01) {  // early ray termination
      transp = 0;
      stabilize;
    }
    if (rayN > camFar) stabilize;
    rayN = rayN + rayStep;
  }
  stabilize {
    real a = 1 - transp; // undo pre-multiplied alpha
    if (a > 0) rgba = [rgb[0]/a, rgb[1]/a, rgb[2]/a, a];
  }
}
initially [raycast(ui, vi) | vi in 0..iresV-1, ui in 0..iresU-1];
// ^^^^^^^^^^^^^^^^^^^^^^ END program copied from VIS'15 paper
